syntax.checking=Checking Syntax...
semantics.checking=Checking Semantics...
non.boolean=Condition in {0} should have truth value type, found {1} instead
non.arithmentic=Operand of {0} should have arithmetic type, found {1} instead
non.arithmentic.or.char=Operand of {0} should have arithmetic or character type, found {1} instead
non.integer=Operand of {0} should have whole number type, found {1} instead
non.boolean=Operand of {0} should have truth value type, found {1} instead
non.char=Operand of {0} should have character type
non.array=Operand of {0} should have array type
non.string=Operand of {0} should have string type
non.array.or.string=Operand of {0} should have array or string type
bad.array.expression=The array elements are not type-compatible with each other
non.writable.in.assignment.statement=The target of the assignment is not writable
non.writable.in.read.statement=The target of the read statement is not writable
eq.type.error=Cannot compare objects of the types {0} and {1}
internal.error.bad.operator=Internal error: an operator cannot be processed
exit.not.in.loop=An exit statement can only appear within a loop
unbalanced.parallel.assignment=Parallel assignment must have an equal number of expressions on either side of "="
type.mismatch=Types of operands do not match around the {0} operator
non.reference=Reference operands are required around the {0} operator
not.a.function=Only functions can be called
no.complex.functions=Manatee does not support function values
bad.expressions=Identifiers in expressions can only be variables or functions
bad.number=The value of {0} is out of range for numbers
bad.int=The value of {0} is out of range for whole numbers
return.outside.subroutine=A return statement cannot appear outside of a function
return.value.not.allowed=Procedures cannot have return statements
argument.count.mismatch=Call contains {0} arguments, expected {1}
parameter.type.mismatch=The argument for parameter {0} has an illegal type
identifier.redeclared=Identifier {0} redeclared
variable.not.found=Variable {0} not found
type.not.found=Type {0} not found
not.a.type={0} is not a type
not.found=The identifier {0} was not found
procedure.not.found=Procedure {0} not found
not.a.procedure=The identifier {0} is not a procedure
initializer.or.type.required=Variable declarations require either an initializer or an actual type
not.object.type=Non-object types do not have properties
