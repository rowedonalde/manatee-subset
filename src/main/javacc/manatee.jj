/*
 *  manatee.jj
 *
 *  A JavaCC specification for a subset of Manatee.
 */

options {
    UNICODE_INPUT = true;
    STATIC = false;
}

PARSER_BEGIN(Parser)

package edu.lmu.cs.xlg.manatee.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.manatee.entities.*;

public class Parser {

    /**
     * Returns the result of parsing the Manatee program on the given Reader.
     */
    public Script parse(Log log) {
        try {
            return SCRIPT();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }
}

PARSER_END(Parser)

SKIP: {
    " " | "\t" | <"--" (~["\n","\r"])*>
}

// Reserved Words and symbols

TOKEN: {
    "my" | "is" | "always" | "truth" | "value" | "character" | "whole" | "number" 
    | "string" | "list" | "to" | "get" | "end" | "a" | "an" | "some" | "the" | "and"
    | "read" | "write" | "set" | "exit" | "return" | "do" | "nothing"
    | "if" | "while" | "else" | "loop" | "times" | "for" | "each" | "by" | "in" | "or"
    | "yes" | "no" | "not" | "length" | "of" | "has" | "seconds" | "second"
    | "increment" | "decrement" | "fail" | "with" | "unless" | "until" | "try"
    | "use" | "module" | "after" | "modulo" | "recover" | "divides" | "complement"
    | "bit" | "xor" | "bit xor" | "bit and" | "bit or"
    | ":" | "," | "+" | "-" | "*" | "/" | "<<" | ">>"
    | "<" | "<=" | "=" | "≠" | ">=" | ">" | "(" | ")" | "[" | "]"
|
    < BR: "\n" | "\r" | "\r\n" >
|
    < INTLIT: (["0"-"9"])+ >
|
    < NUMLIT: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? >
|
    < #EXPONENT: ("x"|"×") "10^" ("-")? (["0"-"9"])+ >
|
    < CHARLIT:
        "'"
        (
            ~["'", "\\" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            "\\" ["n", "t", "\"", "\'", "\\"]
        )
        "'"
    >
|
    < STRLIT:
        "\""
        (
            ~["\"", "\\" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            "\\" ["n", "t", "\"", "\'", "\\"]
        )*
        "\""
    >
|
    < ID: <LETTER> (<LETTER>|<DIGIT>|"_")* >
|
    < #LETTER: [
    "\u0041"-"\u005a", "\u0061"-"\u007a", "\u00aa"-"\u00aa", "\u00b5"-"\u00b5", "\u00ba"-"\u00ba",
    "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u0236", "\u0250"-"\u02c1", "\u02c6"-"\u02d1",
    "\u02e0"-"\u02e4", "\u02ee"-"\u02ee", "\u037a"-"\u037a", "\u0386"-"\u0386", "\u0388"-"\u038a",
    "\u038c"-"\u038c", "\u038e"-"\u03a1", "\u03a3"-"\u03ce", "\u03d0"-"\u03f5", "\u03f7"-"\u03fb",
    "\u0400"-"\u0481", "\u048a"-"\u04ce", "\u04d0"-"\u04f5", "\u04f8"-"\u04f9", "\u0500"-"\u050f",
    "\u0531"-"\u0556", "\u0559"-"\u0559", "\u0561"-"\u0587", "\u05d0"-"\u05ea", "\u05f0"-"\u05f2",
    "\u0621"-"\u063a", "\u0640"-"\u064a", "\u066e"-"\u066f", "\u0671"-"\u06d3", "\u06d5"-"\u06d5",
    "\u06e5"-"\u06e6", "\u06ee"-"\u06ef", "\u06fa"-"\u06fc", "\u06ff"-"\u06ff", "\u0710"-"\u0710",
    "\u0712"-"\u072f", "\u074d"-"\u074f", "\u0780"-"\u07a5", "\u07b1"-"\u07b1", "\u0904"-"\u0939",
    "\u093d"-"\u093d", "\u0950"-"\u0950", "\u0958"-"\u0961", "\u0985"-"\u098c", "\u098f"-"\u0990",
    "\u0993"-"\u09a8", "\u09aa"-"\u09b0", "\u09b2"-"\u09b2", "\u09b6"-"\u09b9", "\u09bd"-"\u09bd",
    "\u09dc"-"\u09dd", "\u09df"-"\u09e1", "\u09f0"-"\u09f1", "\u0a05"-"\u0a0a", "\u0a0f"-"\u0a10",
    "\u0a13"-"\u0a28", "\u0a2a"-"\u0a30", "\u0a32"-"\u0a33", "\u0a35"-"\u0a36", "\u0a38"-"\u0a39",
    "\u0a59"-"\u0a5c", "\u0a5e"-"\u0a5e", "\u0a72"-"\u0a74", "\u0a85"-"\u0a8d", "\u0a8f"-"\u0a91",
    "\u0a93"-"\u0aa8", "\u0aaa"-"\u0ab0", "\u0ab2"-"\u0ab3", "\u0ab5"-"\u0ab9", "\u0abd"-"\u0abd",
    "\u0ad0"-"\u0ad0", "\u0ae0"-"\u0ae1", "\u0b05"-"\u0b0c", "\u0b0f"-"\u0b10", "\u0b13"-"\u0b28",
    "\u0b2a"-"\u0b30", "\u0b32"-"\u0b33", "\u0b35"-"\u0b39", "\u0b3d"-"\u0b3d", "\u0b5c"-"\u0b5d",
    "\u0b5f"-"\u0b61", "\u0b71"-"\u0b71", "\u0b83"-"\u0b83", "\u0b85"-"\u0b8a", "\u0b8e"-"\u0b90",
    "\u0b92"-"\u0b95", "\u0b99"-"\u0b9a", "\u0b9c"-"\u0b9c", "\u0b9e"-"\u0b9f", "\u0ba3"-"\u0ba4",
    "\u0ba8"-"\u0baa", "\u0bae"-"\u0bb5", "\u0bb7"-"\u0bb9", "\u0c05"-"\u0c0c", "\u0c0e"-"\u0c10",
    "\u0c12"-"\u0c28", "\u0c2a"-"\u0c33", "\u0c35"-"\u0c39", "\u0c60"-"\u0c61", "\u0c85"-"\u0c8c",
    "\u0c8e"-"\u0c90", "\u0c92"-"\u0ca8", "\u0caa"-"\u0cb3", "\u0cb5"-"\u0cb9", "\u0cbd"-"\u0cbd",
    "\u0cde"-"\u0cde", "\u0ce0"-"\u0ce1", "\u0d05"-"\u0d0c", "\u0d0e"-"\u0d10", "\u0d12"-"\u0d28",
    "\u0d2a"-"\u0d39", "\u0d60"-"\u0d61", "\u0d85"-"\u0d96", "\u0d9a"-"\u0db1", "\u0db3"-"\u0dbb",
    "\u0dbd"-"\u0dbd", "\u0dc0"-"\u0dc6", "\u0e01"-"\u0e30", "\u0e32"-"\u0e33", "\u0e40"-"\u0e46",
    "\u0e81"-"\u0e82", "\u0e84"-"\u0e84", "\u0e87"-"\u0e88", "\u0e8a"-"\u0e8a", "\u0e8d"-"\u0e8d",
    "\u0e94"-"\u0e97", "\u0e99"-"\u0e9f", "\u0ea1"-"\u0ea3", "\u0ea5"-"\u0ea5", "\u0ea7"-"\u0ea7",
    "\u0eaa"-"\u0eab", "\u0ead"-"\u0eb0", "\u0eb2"-"\u0eb3", "\u0ebd"-"\u0ebd", "\u0ec0"-"\u0ec4",
    "\u0ec6"-"\u0ec6", "\u0edc"-"\u0edd", "\u0f00"-"\u0f00", "\u0f40"-"\u0f47", "\u0f49"-"\u0f6a",
    "\u0f88"-"\u0f8b", "\u1000"-"\u1021", "\u1023"-"\u1027", "\u1029"-"\u102a", "\u1050"-"\u1055",
    "\u10a0"-"\u10c5", "\u10d0"-"\u10f8", "\u1100"-"\u1159", "\u115f"-"\u11a2", "\u11a8"-"\u11f9",
    "\u1200"-"\u1206", "\u1208"-"\u1246", "\u1248"-"\u1248", "\u124a"-"\u124d", "\u1250"-"\u1256",
    "\u1258"-"\u1258", "\u125a"-"\u125d", "\u1260"-"\u1286", "\u1288"-"\u1288", "\u128a"-"\u128d",
    "\u1290"-"\u12ae", "\u12b0"-"\u12b0", "\u12b2"-"\u12b5", "\u12b8"-"\u12be", "\u12c0"-"\u12c0",
    "\u12c2"-"\u12c5", "\u12c8"-"\u12ce", "\u12d0"-"\u12d6", "\u12d8"-"\u12ee", "\u12f0"-"\u130e",
    "\u1310"-"\u1310", "\u1312"-"\u1315", "\u1318"-"\u131e", "\u1320"-"\u1346", "\u1348"-"\u135a",
    "\u13a0"-"\u13f4", "\u1401"-"\u166c", "\u166f"-"\u1676", "\u1681"-"\u169a", "\u16a0"-"\u16ea",
    "\u1700"-"\u170c", "\u170e"-"\u1711", "\u1720"-"\u1731", "\u1740"-"\u1751", "\u1760"-"\u176c",
    "\u176e"-"\u1770", "\u1780"-"\u17b3", "\u17d7"-"\u17d7", "\u17dc"-"\u17dc", "\u1820"-"\u1877",
    "\u1880"-"\u18a8", "\u1900"-"\u191c", "\u1950"-"\u196d", "\u1970"-"\u1974", "\u1d00"-"\u1d6b",
    "\u1e00"-"\u1e9b", "\u1ea0"-"\u1ef9", "\u1f00"-"\u1f15", "\u1f18"-"\u1f1d", "\u1f20"-"\u1f45",
    "\u1f48"-"\u1f4d", "\u1f50"-"\u1f57", "\u1f59"-"\u1f59", "\u1f5b"-"\u1f5b", "\u1f5d"-"\u1f5d",
    "\u1f5f"-"\u1f7d", "\u1f80"-"\u1fb4", "\u1fb6"-"\u1fbc", "\u1fbe"-"\u1fbe", "\u1fc2"-"\u1fc4",
    "\u1fc6"-"\u1fcc", "\u1fd0"-"\u1fd3", "\u1fd6"-"\u1fdb", "\u1fe0"-"\u1fec", "\u1ff2"-"\u1ff4",
    "\u1ff6"-"\u1ffc", "\u2071"-"\u2071", "\u207f"-"\u207f", "\u2102"-"\u2102", "\u2107"-"\u2107",
    "\u210a"-"\u2113", "\u2115"-"\u2115", "\u2119"-"\u211d", "\u2124"-"\u2124", "\u2126"-"\u2126",
    "\u2128"-"\u2128", "\u212a"-"\u212d", "\u212f"-"\u2131", "\u2133"-"\u2139", "\u213d"-"\u213f",
    "\u2145"-"\u2149", "\u3005"-"\u3006", "\u3031"-"\u3035", "\u303b"-"\u303c", "\u3041"-"\u3096",
    "\u309d"-"\u309f", "\u30a1"-"\u30fa", "\u30fc"-"\u30ff", "\u3105"-"\u312c", "\u3131"-"\u318e",
    "\u31a0"-"\u31b7", "\u31f0"-"\u31ff", "\u3400"-"\u4db5", "\u4e00"-"\u9fa5", "\ua000"-"\ua48c",
    "\uac00"-"\ud7a3", "\uf900"-"\ufa2d", "\ufa30"-"\ufa6a", "\ufb00"-"\ufb06", "\ufb13"-"\ufb17",
    "\ufb1d"-"\ufb1d", "\ufb1f"-"\ufb28", "\ufb2a"-"\ufb36", "\ufb38"-"\ufb3c", "\ufb3e"-"\ufb3e",
    "\ufb40"-"\ufb41", "\ufb43"-"\ufb44", "\ufb46"-"\ufbb1", "\ufbd3"-"\ufd3d", "\ufd50"-"\ufd8f",
    "\ufd92"-"\ufdc7", "\ufdf0"-"\ufdfb", "\ufe70"-"\ufe74", "\ufe76"-"\ufefc", "\uff21"-"\uff3a",
    "\uff41"-"\uff5a", "\uff66"-"\uffbe", "\uffc2"-"\uffc7", "\uffca"-"\uffcf", "\uffd2"-"\uffd7",
    "\uffda"-"\uffdc"
    ] >
|
    < #DIGIT: [
    "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
    "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
    "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
    "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
    "\uff10"-"\uff19"
    ] >
}

// -------------------
// SCRIPT -> BR* STMT+
// -------------------

Script SCRIPT(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    (<BR>)*
    (s = STMT() {statements.add(s);})+
    <EOF>
    {return new Script(statements);}
}

// ---------------------------
// IMPORT -> use module ID BR+
// ---------------------------

Statement IMPORT(): {
    Token mod = null;
}{
    "use" "module" mod = <ID> (<BR>)+
    {return new Import(mod.image);}
}

// -----------------------------------------------------
// STMT -> (DEC | SIMPLESTMT MODIFER? | COMPLEXSTMT) BR+
// -----------------------------------------------------

Statement STMT(): {
    Statement s;
    ModifiedStatement.Modifier m = null;
}{
    (
        s = DEC()
    |
        s = COMPLEXSTMT()
    |
        s = SIMPLESTMT() (m = MODIFIER())?
        {if (m != null) s = new ModifiedStatement(m, s);}
    )
    ((<BR>)+ | <EOF>)
    {return s;}
}

// ---------------------------------
// DEC -> VARDEC | PROCDEC | FUNCDEC
// ---------------------------------

Statement DEC(): {
    Statement s;
}{
    (
        s = VARDEC()
    |
        LOOKAHEAD(2) s = FUNDEC()
    |
        s = PROCDEC()
    )
    {return s;}
}

// --------------------------------
// VARDEC -> my ID is always? EXP
//        |  my ID is (a | an) TYPE
// --------------------------------

Variable VARDEC(): {
    String t = null;
    Token v = null;
    Expression e = null;
    boolean constant = false;
}{
    "my" v = <ID> "is"
    (
        ("always" {constant = true;})? e = EXP()
    |
        ("a" | "an") (t = TYPE())?
    )
    {return new Variable(v.image, t, e, constant);}
}

// ---------------------
// TYPE -> truth value
//     |  character
//     |  whole? number
//     |  string
//     |  TYPE list
// ---------------------

String TYPE(): {
    String t;
    StringBuilder builder = new StringBuilder();
}{
    (
        "truth" "value" {t = "truth value";}
    |
        "character" {t = "character";}
    |
        "whole" "number" {t = "whole number";}
    |
        "number" {t = "number";}
    |
        "string" {t = "string";}
    )
    {builder.append(t);}
    (
        LOOKAHEAD(2) "list" {builder.append(" list");}
    )*
    {return builder.toString();}
}

// --------------------------------------------------------------
// TYPEDEC -> (a | an) ID has ':' BR+ ((a | an) TYPE ID BR+)+ end
// --------------------------------------------------------------

Type TYPEDEC(): {
    Token type = null;
    Token propType = null;
    Token propName = null;
    List<Variable> properties = new ArrayList<Variable>();
}{
    ("a" | "an") type = <ID> "has" ":" (<BR>)+
    (("a" | "an") propType = <ID> propName = <ID>
    {properties.add(new Variable(propName.image, propType.image, null, false));}
    (<BR>)+)+ "end"
    {return new Type(type.image, properties);}
}

// ----------------------------------
// PROCDEC -> to ID PARAMS? BLOCK end
// ----------------------------------

Procedure PROCDEC(): {
    Token name;
    List<Variable> params = new ArrayList<Variable>();
    Block body;
}{
    "to" name = <ID> (PARAMS(params))? body = BLOCK() "end"
    {return new Procedure(name.image, params, body);}
}


// ----------------------------------------------------------------------
// FUNDEC -> to get (a | an | some | the)? TYPE ID (of PARAMS)? BLOCK end
// ----------------------------------------------------------------------

Function FUNDEC(): {
    String type;
    Token name;
    List<Variable> params = new ArrayList<Variable>();
    Block body;

}{
    "to" "get" ("a" | "an" | "some" | "the")?
    type = TYPE()
    name = <ID>
    ("of" PARAMS(params))?
    body = BLOCK()
    "end"
    {return new Function(type, name.image, params, body);}
}

// ----------------------------------------------------
// PARAMS -> TYPE ID (',' TYPE ID)* (','? and TYPE ID)?
// ----------------------------------------------------

void PARAMS(List<Variable> params): {
    String t;
    Token p;
}{
    t = TYPE() p = <ID>
    {params.add(new Variable(p.image, t, null, false));}
    (
        LOOKAHEAD(2) "," t = TYPE() p = <ID>
        {params.add(new Variable(p.image, t, null, false));}
    )*
    (
        (",")? "and" t = TYPE() p = <ID>
        {params.add(new Variable(p.image, t, null, false));}
    )?
}

// ----------------------
// BLOCK -> ":" BR+ STMT+
// ----------------------

Block BLOCK(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    ":" (<BR>)+ ( s = STMT() {statements.add(s);} )+
    {return new Block(statements);}
}

// ----------------------------
// SIMPLESTMT -> increment EXP (by EXP)?
//            |  decrement EXP (by EXP)?
//            |  set EXP (',' EXP)* to EXP
//            |  exit the loop
//            |  return EXP?
//            |  fail with EXP?
//            |  do nothing
//            |  do ID EXPLIST? (after EXP seconds)?
// ----------------------------

Statement SIMPLESTMT(): {
    Expression e = null;
    Expression e2 = null;
    Token t = null;
    Expression source;
    Expression target;
    List<Expression> args = new ArrayList<Expression>();
    List<Expression> targets = new ArrayList<Expression>();
}{
    (
        "increment" e = EXP() ("by" e2 = EXP())?
        {return new IncrementStatement(e, e2);}
    |
        "decrement" e = EXP() ("by" e2 = EXP())?
        {return new IncrementStatement(e, e2, true);}
    |
        "set" target = EXP() {targets.add(target);} 
        ("," target = EXP() {targets.add(target);})* "to" source = EXP()
        {
            if (targets.size() == 1) {
                return new AssignmentStatement(target, source);
            } else {
                return new ParallelAssignmentStatement(targets, source);
            }
        }
    |
        "exit" "the" "loop"
        {return new ExitStatement();}
    |
        "return" (e = EXP())?
        {return new ReturnStatement(e);}
    |
        "fail" ("with" e = EXP())?
        {return new FailStatement(e);}
    |
        LOOKAHEAD(2) "do" "nothing"
        {return new DoNothingStatement();}
    |
        "do" t = <ID> (args = EXPLIST())? ("after" e = EXP() ("second" | "seconds"))?
        {return new CallStatement(t.image, args, e);}
    )
}

// ---------------------------------------------
// MODIFIER -> (if | while | unless | until) EXP
// ---------------------------------------------

ModifiedStatement.Modifier MODIFIER(): {
    ModifiedStatement.ModifierType m;
    Expression e;
}{
    (
        "if" {m = ModifiedStatement.ModifierType.IF;}
    |
        "while" {m = ModifiedStatement.ModifierType.WHILE;}
    |
        "unless" {m = ModifiedStatement.ModifierType.UNLESS;}
    |
        "until" {m = ModifiedStatement.ModifierType.UNTIL;}
    )
    e = EXP()
    {return new ModifiedStatement.Modifier(m, e);}
}

// --------------------------
// COMPLEXSTMT -> CONDITIONAL
//             |  LOOP
//             |  TRY
// --------------------------

Statement COMPLEXSTMT(): {
    Statement s;
}{
    (
        s = CONDITIONAL()
    |
        s = LOOP()
    |
        s = TRY()
    )
    {return s;}
}
// ------------------------------------------------------------------
// CONDITIONAL -> if EXP BLOCK (else if EXP BLOCK)* (else BLOCK)? end             
// ------------------------------------------------------------------

Statement CONDITIONAL(): {
    ConditionalStatement.Arm arm;
    List<ConditionalStatement.Arm> arms = new ArrayList<ConditionalStatement.Arm>();
    Expression e;
    Block b;
    Block elseBlock = null;
}{
    "if" e = EXP() b = BLOCK()
    {arms.add(new ConditionalStatement.Arm(e, b));}
    (
        LOOKAHEAD(2) "else" "if" e = EXP() b = BLOCK()
        {arms.add(new ConditionalStatement.Arm(e, b));}
    )*
    (
        "else" elseBlock = BLOCK()
    )?
    "end"
    {return new ConditionalStatement(arms, elseBlock);}
}

// -----------------------------------------------------
// LOOP        -> LOOPCONTROL BLOCK end
// LOOPCONTROL -> loop (EXP times)?
//             |  (while | unless) EXP
//             |  for each ID in EXP (to EXP (by EXP)?)?
// -----------------------------------------------------

Statement LOOP(): {
    Token t = null;
    Expression e = null;
    Expression e2 = null;
    Expression e3 = null;
    Block b;
}{
    (
        "loop" (e = EXP() "times")? b = BLOCK() "end"
        {return e == null ? new PlainLoop(b) : new TimesLoop(e, b);}
    |
        "while" e = EXP() b = BLOCK() "end"
        {return new WhileLoop(e, b);}
    |
        "until" e = EXP() b = BLOCK() "end"
        {return new UntilLoop(e, b);}
    |
        "for" "each" t = <ID> "in" e = EXP()
        (
            "to" e2 = EXP() ("by" e3 = EXP())?
        )?
        b = BLOCK() "end"
        {
            if (e2 == null) {
                return new CollectionLoop(t.image, e, b);
            } else {
                return new RangeLoop(t.image, e, e2, e3, b);
            }
        }
    )
}

// ----------------------------------
// TRY -> try BLOCK recover BLOCK end
// ----------------------------------

Statement TRY(): {
    Block tryBlock;
    Block recoverBlock;
}{
    "try" tryBlock = BLOCK() "recover" recoverBlock = BLOCK() "end"
    {return new TryStatement(tryBlock, recoverBlock);}
}

// ----------------------
// EXP -> EXP1 (or EXP1)*
// ----------------------

Expression EXP(): {
    Expression e1;
    Expression e2;
}{
    e1 = EXP1()
    ("or" e2 = EXP1() {e1 = new BinaryExpression(e1, "or", e2);})*
    {return e1;}
}

// ------------------------
// EXP1 -> EXP2 (and EXP2)*
// ------------------------

Expression EXP1(): {
    Expression e1;
    Expression e2;
}{
    e1 = EXP2()
    ("and" e2 = EXP2() {e1 = new BinaryExpression(e1, "and", e2);})*
    {return e1;}
}

// ---------------------------
// EXP2 -> EXP3 (bit or EXP3)*
// ---------------------------

Expression EXP2(): {
    Expression e1;
    Expression e2;
}{
    e1 = EXP3()
    (LOOKAHEAD(2) "bit" "or" e2 = EXP3() {e1 = new BinaryExpression(e1, "bit or", e2);})*
    {return e1;}
}

// ----------------------------
// EXP3 -> EXP4 (bit xor EXP4)*
// ----------------------------

Expression EXP3(): {
    Expression e1;
    Expression e2;
}{
    e1 = EXP4()
    (LOOKAHEAD(2) "bit" "xor" e2 = EXP4() {e1 = new BinaryExpression(e1, "bit xor", e2);})*
    {return e1;}
}

// ----------------------------
// EXP4 -> EXP5 (bit and EXP3)*
// ----------------------------

Expression EXP4(): {
    Expression e1;
    Expression e2;
}{
    e1 = EXP5()
    (LOOKAHEAD(2) "bit" "and" e2 = EXP5() {e1 = new BinaryExpression(e1, "bit and", e2);})*
    {return e1;}
}

// --------------------------
// EXP5 -> EXP6 (RELOP EXP6)?
// --------------------------

Expression EXP5(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = EXP6()
    (
        op = RELOP()
        e2 = EXP6()
        {e1 = new BinaryExpression(e1, op, e2);}
    )?
    {return e1;}
}

// ----------------------------
// EXP6 -> EXP7 (SHIFTOP EXP7)*
// ----------------------------

Expression EXP6(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = EXP7()
    (
        op = SHIFTOP()
        e2 = EXP7()
        {e1 = new BinaryExpression(e1, op, e2);}
    )*
    {return e1;}
}

// --------------------------
// EXP7 -> EXP8 (ADDOP EXP8)*
// --------------------------

Expression EXP7(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = EXP8()
    (
        op = ADDOP()
        e2 = EXP8()
        {e1 = new BinaryExpression(e1, op, e2);}
    )*
    {return e1;}
}
// --------------------------
// EXP8 -> EXP9 (MULOP EXP9)*
// --------------------------

Expression EXP8(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = EXP9()
    (
        op = MULOP()
        e2 = EXP9()
        {e1 = new BinaryExpression(e1, op, e2);}
    )*
    {return e1;}
}

// ---------------------
// EXP9 -> PREFIX* EXP10
// ---------------------

Expression EXP9(): {
    String op = null;
    Expression e;
}{
    (op = PREFIX())? e = EXP10()
    {return op == null ? e : new UnaryExpression(op, e);}
}

// ----------------------------------------
// EXP10 -> EXP11 SUFFIX*
// SUFFIX -> '(' EXPLIST? ')' | '[' EXP ']'
// ----------------------------------------

Expression EXP10(): {
    Expression e;
    List<Expression> args = new ArrayList<Expression>();
    Expression subscript;
}{
    e = EXP11()
    (
        "(" (args = EXPLIST())? ")"
        {e = new FunctionCall(e, args);}
    |
        "[" subscript = EXP() "]"
        {e = new SubscriptExpression(e, subscript);}
    )*
    {return e;}
}

// -------------------------
// EXP11 -> LITERAL
//       |  ID
//       |  ID '{' ID ':' EXP (',' ID ':' EXP)* '}'
//       |  '[' EXPLIST? ']'
//       |  '(' EXP ')'
// -------------------------

Expression EXP11(): {
    List<Expression> expressions = new ArrayList<Expression>();
    List<String> dictionaryKeys = new ArrayList<String>();
    Expression e = null;
    Token t;
    Token t2;
    Token key;
    Token valueExpression;
}{
    (
        e = LITERAL()
        {return e;}
    |
        //LOOKAHEAD(2) t = <ID>
        LOOKAHEAD(2) t = <ID>
        {return new IdentifierExpression(t.image);}
    |
        LOOKAHEAD(2) t = <ID> "{" key = <ID> {dictionaryKeys.add(key.image);} ":"
        valueExpression = EXP() {expressions.add(valueExpression);}
        ("," key = <ID> {dictionaryKeys.add(key.image);} ":"
        valueExpression = EXP() {expressions.add(valueExpression);})* "}"
        {return new IdentifierExpression(t.image, dictionaryKeys, expressions);}
    |
        "[" (expressions = EXPLIST())? "]"
        {return new ArrayConstructor(expressions);}
    |
        "(" e = EXP() ")"
        {return e;}
    )
}

// ------------------
// LITERAL -> nothing
//         |  yes
//         |  no
//         |  INTLIT
//         |  NUMLIT
//         |  CHARLIT
//         |  STRLIT
// ------------------

Literal LITERAL(): {
    Token t;
}{
    "nothing" {return NullLiteral.INSTANCE;}
|
    "yes" {return BooleanLiteral.TRUE;}
|
    "no" {return BooleanLiteral.FALSE;}
|
    t = <INTLIT> {return new WholeNumberLiteral(t.image);}
|
    t = <NUMLIT> {return new NumberLiteral(t.image);}
|
    t = <CHARLIT> {return new CharacterLiteral(t.image);}
|
    t = <STRLIT> {return new StringLiteral(t.image);}
}

// -------------------------
// EXPLIST -> EXP (',' EXP)*
// -------------------------

List<Expression> EXPLIST(): {
    List<Expression> expressions = new ArrayList<Expression>();
    Expression e;
}{
    e = EXP() {expressions.add(e);}
    ("," e = EXP() {expressions.add(e);})*
    {return expressions;}
}

// ----------------------------------------------------------------
// RELOP -> '<' | '<=' | '=' | '≠' | '>=' | '>' | divides | is not?
// ----------------------------------------------------------------

String RELOP(): {
}{
    "<" {return "<";}
    |
    "<=" {return "<=";}
    |
    "=" {return "=";}
    |
    "≠" {return "≠";}
    |
    ">=" {return ">=";}
    |
    ">" {return ">";}
    |
    "divides" {return "divides";}
    |
    LOOKAHEAD(2) "is" "not" {return "is not";}
    |
    "is" {return "is";}
}

// ----------------------
// SHIFTOP -> '<<' | '>>'
// ----------------------

String SHIFTOP(): {
    Token t;
}{
    (t = "<<" | t = ">>")
    {return t.image;}
}

// -----------------------
// ADDOP -> '+' | '-' | in
// -----------------------

String ADDOP(): {
    Token t;
}{
    (t = "+" | t = "-" | t = "in")
    {return t.image;}
}

// -----------------------------
// MULOP -> '*' | '/' | 'modulo'
// -----------------------------

String MULOP(): {
    Token t;
}{
    (t = "*" | t = "/" | t = "modulo")
    {return t.image;}
}

// -----------------------------------------------
// PREFIX -> '-' | not | length of | complement of
// -----------------------------------------------

String PREFIX(): {
    Token t;
}{
    (t = "-" | t = "not" | t = "length" "of" | t = "complement" "of")
    {return t.image;}
}
